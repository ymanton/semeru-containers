# (C) Copyright IBM Corporation 2023, 2023
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

FROM registry.access.redhat.com/ubi8/ubi:latest as criu-build

ARG CRIU_REPO=https://github.com/ibmruntimes/criu.git
ARG CRIU_BRANCH=march_ea_23
ARG CRIU_SHA=HEAD
ARG CRIU_DEBUG=1

RUN dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm \
    && dnf install -y --enablerepo="codeready-builder-for-rhel-8-$(uname -m)-rpms" \
        git \
        make \
        gcc \
        pkg-config \
        protobuf \
        protobuf-devel \
        protobuf-c-devel \
        python3-protobuf \
        # Add libbsd to CRIU dependencies installed in final image if building with libbsd-devel
        #libbsd-devel \
        iproute \
        nftables \
        libcap-devel \
        libnet-devel \
        libnl3-devel \
        libaio-devel \
        python3-future \
        asciidoc \
        xmlto

WORKDIR /criu-src

RUN [ ! -e ./Makefile ] && git clone --branch "${CRIU_BRANCH}" "${CRIU_REPO}" . \
    && git checkout ${CRIU_SHA}

RUN make DEBUG=${CRIU_DEBUG} DESTDIR=/criu-install PREFIX=/usr/local install

FROM registry.access.redhat.com/ubi8/ubi:latest

# Artifactory credentials to download CRIU binary
# Set your Artifactory credentials here or pass them at build time
ARG ARTIFACTORY_TOKEN

ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

RUN dnf install -y \
    # CRIU dependencies
        iptables-libs jansson libibverbs libmnl libnet libnftnl libpcap nftables protobuf-c \
    # Semeru dependencies
        tzdata openssl curl ca-certificates fontconfig glibc-langpack-en gzip tar \
    && dnf update -y; dnf clean all;

LABEL name="IBM Semeru Runtime EA" \
      vendor="International Business Machines Corporation" \
      version="11.0.19.7" \
      release="11" \
      run="docker run --rm -ti <image_name:tag> /bin/bash" \
      summary="IBM Semeru Runtime EA Docker Image for OpenJDK with openj9 and ubi" \
      description="For more information on this image please see https://github.com/ibmruntimes/semeru-containers/blob/master/README.md"

# Install CRIU
COPY --from=criu-build /criu-install /

RUN set -eux; \
    echo /usr/local/lib64 > /etc/ld.so.conf.d/criu.conf; \
    ldconfig; \
    setcap cap_checkpoint_restore,cap_sys_ptrace,cap_setpcap=eip /usr/local/sbin/criu; \
    mkdir -p /opt/criu; \
    cp /usr/local/sbin/criu /opt/criu/criu; \
    setcap cap_checkpoint_restore,cap_setpcap=eip /opt/criu/criu; \
    rm -fr criu criu.tar.gz;

ENV PATH="/usr/local/sbin:$PATH"

ENV JAVA_VERSION 11.0.19.7

RUN set -eux; \
    ARCH="$(uname -m)"; \
    case "${ARCH}" in \
       amd64|x86_64) \
         ESUM='f4861c852e706879693cc3a8d93ba8a9c0699c0f659f185775d6b6a0663fe045'; \
         BINARY_URL='https://github.com/ibmruntimes/semeru11-ea-binaries/releases/download/jdk-11.0.19%2B7_may_23-preview_1/ibm-semeru-open-jdk_x64_linux_11.0.19_7_May_23-preview_1.tar.gz'; \
         ;; \
       *) \
         echo "Unsupported arch: ${ARCH}"; \
         exit 1; \
         ;; \
    esac; \
    curl -LfsSo /tmp/openjdk.tar.gz ${BINARY_URL}; \
    echo "${ESUM} */tmp/openjdk.tar.gz" | sha256sum -c -; \
    mkdir -p /opt/java/java-ea; \
    cd /opt/java/java-ea; \
    tar -xf /tmp/openjdk.tar.gz --strip-components=1; \
    rm -fr openjdk.tar.gz;

ENV JAVA_HOME=/opt/java/java-ea \
    PATH="/opt/java/java-ea/bin:$PATH"
ENV JAVA_TOOL_OPTIONS="-XX:+IgnoreUnrecognizedVMOptions -XX:+PortableSharedCache -XX:+IdleTuningGcOnIdle -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,readonly,nonFatal"

# Create OpenJ9 SharedClassCache (SCC) for bootclasses to improve the java startup.
# Downloads and runs tomcat to generate SCC for bootclasses at /opt/java/.scc/openj9_system_scc
# Does a dry-run and calculates the optimal cache size and recreates the cache with the appropriate size.
# With SCC, OpenJ9 startup is improved ~50% with an increase in image size of ~14MB
# Application classes can be create a separate cache layer with this as the base for further startup improvement

RUN set -eux; \
    unset OPENJ9_JAVA_OPTIONS; \
    SCC_SIZE="50m"; \
    DOWNLOAD_PATH_TOMCAT=/tmp/tomcat; \
    INSTALL_PATH_TOMCAT=/opt/tomcat-home; \
    TOMCAT_CHECKSUM="0db27185d9fc3174f2c670f814df3dda8a008b89d1a38a5d96cbbe119767ebfb1cf0bce956b27954aee9be19c4a7b91f2579d967932207976322033a86075f98"; \
    TOMCAT_DWNLD_URL="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.35/bin/apache-tomcat-9.0.35.tar.gz"; \
    \
    mkdir -p "${DOWNLOAD_PATH_TOMCAT}" "${INSTALL_PATH_TOMCAT}"; \
    curl -LfsSo "${DOWNLOAD_PATH_TOMCAT}"/tomcat.tar.gz "${TOMCAT_DWNLD_URL}"; \
    echo "${TOMCAT_CHECKSUM} *${DOWNLOAD_PATH_TOMCAT}/tomcat.tar.gz" | sha512sum -c -; \
    tar -xf "${DOWNLOAD_PATH_TOMCAT}"/tomcat.tar.gz -C "${INSTALL_PATH_TOMCAT}" --strip-components=1; \
    rm -rf "${DOWNLOAD_PATH_TOMCAT}"; \
    \
    java -Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal,createLayer -Xscmx$SCC_SIZE -version; \
    export OPENJ9_JAVA_OPTIONS="-Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal"; \
    "${INSTALL_PATH_TOMCAT}"/bin/startup.sh; \
    sleep 5; \
    "${INSTALL_PATH_TOMCAT}"/bin/shutdown.sh -force; \
    sleep 15; \
    FULL=$( (java -Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,printallStats 2>&1 || true) | awk '/^Cache is [0-9.]*% .*full/ {print substr($3, 1, length($3)-1)}'); \
    DST_CACHE=$(java -Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,destroy 2>&1 || true); \
    SCC_SIZE=$(echo $SCC_SIZE | sed 's/.$//'); \
    SCC_SIZE=$(awk "BEGIN {print int($SCC_SIZE * $FULL / 100.0)}"); \
    [ "${SCC_SIZE}" -eq 0 ] && SCC_SIZE=1; \
    SCC_SIZE="${SCC_SIZE}m"; \
    java -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal,createLayer -Xscmx$SCC_SIZE -version; \
    unset OPENJ9_JAVA_OPTIONS; \
    \
    export OPENJ9_JAVA_OPTIONS="-Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal"; \
    "${INSTALL_PATH_TOMCAT}"/bin/startup.sh; \
    sleep 5; \
    "${INSTALL_PATH_TOMCAT}"/bin/shutdown.sh -force; \
    sleep 5; \
    FULL=$( (java -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,printallStats 2>&1 || true) | awk '/^Cache is [0-9.]*% .*full/ {print substr($3, 1, length($3)-1)}'); \
    echo "SCC layer is $FULL% full."; \
    rm -rf "${INSTALL_PATH_TOMCAT}"; \
    # Create a new SCC layer
    if [ ! -d "/opt/java/.scc" ]; then \
          mkdir /opt/java/.scc; \
    fi; \
    chmod -R 0777 /opt/java/.scc; \
    \
    echo "SCC generation phase completed";

CMD ["jshell"]

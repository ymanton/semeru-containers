# (C) Copyright IBM Corporation 2021, 2023
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

FROM registry.access.redhat.com/ubi9/ubi:latest as glibc-build

# If coreutils-single is installed we need to replace it with coreutils, otherwise the glibc self-test that rpmbuild runs will fail.
# coreutils-single provides /bin/true as a shell script, but glibc needs a real binary to test against.
RUN source /etc/os-release \
    && dnf config-manager --enable ubi-${VERSION_ID%.*}-baseos-source \
    && dnf download --source glibc \
    && dnf --enablerepo=codeready-builder-for-rhel-${VERSION_ID%.*}-$(uname -m)-rpms builddep -y glibc \
    && dnf install -y rpm-build glibc-static \
    && dnf install -y --allowerasing coreutils \
    && rpm -ivh glibc-*.src.rpm \
    && rpmbuild -bp ~/rpmbuild/SPECS/glibc.spec

COPY instanton-glibc-ppc64le-s390x-tunables-hwcaps.patch /tmp/glibc-patches/instanton-glibc-ppc64le-s390x-tunables-hwcaps.patch

RUN patch -p0 -d ~/rpmbuild/BUILD < /tmp/glibc-patches/instanton-glibc-ppc64le-s390x-tunables-hwcaps.patch

RUN rpmbuild --short-circuit -bc ~/rpmbuild/SPECS/glibc.spec \
    && rpmbuild --short-circuit -bi ~/rpmbuild/SPECS/glibc.spec \
    && rpmbuild --short-circuit -bb ~/rpmbuild/SPECS/glibc.spec

# Rebuilding the glibc source RPM results in many binary RPMs being produced, not all of which are currently installed.
# Find which ones are currently installed and move them for the next stage to install.
# Strictly speaking we should make all of these RPMs available to the next stage and do the check there, but we assume
# the check will return the same answer in both stages and minimize the size increase of the final image.
RUN ls ~/rpmbuild/RPMS/$(uname -m)/ | sed "s/^\(.\+\)-[0-9]\+\.[0-9]\+.*\.el.\.$(uname -m)\.rpm$/\1/" | uniq | tee built-packages \
    && awk '{ print $0 "-[0-9]\\+\\.[0-9]\\+" }' built-packages | tee built-packages.regex \
    && rpm -qa | grep -f built-packages.regex | tee built-packages-already-installed \
    && cd ~/rpmbuild/RPMS/$(uname -m) \
    && mkdir -p /tmp/patched-glibc \
    && mv -v $(cat $OLDPWD/built-packages-already-installed | awk '{ print $0 ".rpm" }') /tmp/patched-glibc/

FROM registry.access.redhat.com/ubi9/ubi:latest

ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

COPY --from=glibc-build /tmp/patched-glibc /tmp/patched-glibc

# --nodeps needed because building via short-circuit inserts a fake dependency on "rpmlib(ShortCircuited)" because by design packages built via short-circuit are not intended to be installed.
# --force is needed because rebuilt packages have the same version number as existing installed packages.
RUN rpm -ivh --nodeps --force /tmp/patched-glibc/* \
    && rm -rf /tmp/patched-glibc

RUN dnf install -y \
    # CRIU dependencies
        iptables-libs iptables jansson libibverbs libmnl libnet libnftnl libpcap nftables protobuf-c \
    # Semeru dependencies
        tzdata openssl ca-certificates fontconfig glibc-langpack-en gzip tar \
    && dnf update -y && dnf clean all;

LABEL name="IBM Semeru Runtime " \
      vendor="International Business Machines Corporation" \
      version="jdk-17.0.8.1+1_openj9-0.40.0" \
      release="17" \
      run="docker run --rm -ti <image_name:tag> /bin/bash" \
      summary="IBM Semeru Runtime Docker Image for OpenJDK with openj9 and ubi" \
      description="For more information on this image please see https://github.com/ibmruntimes/openjdk-docker/blob/master/README.md"

# Install CRIU
RUN --mount=type=secret,id=criu_secrets source /run/secrets/criu_secrets; \
    ARCH="$(uname -m)"; \
    case "${ARCH}" in \
      amd64|x86_64|ppc64el|ppc64le|s390x|aarch64|arm64) \
        case "${ARCH}" in \
        amd64|x86_64) \
          CRIU_URL='https://na-public.artifactory.swg-devops.com/artifactory/sys-rt-generic-local/hyc-runtimes-jenkins.swg-devops.com/build-scripts/criu_build/28/x64_linux/criu.tar.gz'; \
          CRIU_SHA_URL='https://na-public.artifactory.swg-devops.com/artifactory/sys-rt-generic-local/hyc-runtimes-jenkins.swg-devops.com/build-scripts/criu_build/28/x64_linux/criu.tar.gz.sha256.txt'; \
          ;; \
        ppc64el|ppc64le) \
          CRIU_URL='https://na-public.artifactory.swg-devops.com/artifactory/sys-rt-generic-local/hyc-runtimes-jenkins.swg-devops.com/build-scripts/criu_build/30/ppc64le_linux/criu.tar.gz'; \
          CRIU_SHA_URL='https://na-public.artifactory.swg-devops.com/artifactory/sys-rt-generic-local/hyc-runtimes-jenkins.swg-devops.com/build-scripts/criu_build/30/ppc64le_linux/criu.tar.gz.sha256.txt'; \
          ;; \
        s390x) \
          CRIU_URL='https://na-public.artifactory.swg-devops.com/artifactory/sys-rt-generic-local/hyc-runtimes-jenkins.swg-devops.com/build-scripts/criu_build/28/s390x_linux/criu.tar.gz'; \
          CRIU_SHA_URL='https://na-public.artifactory.swg-devops.com/artifactory/sys-rt-generic-local/hyc-runtimes-jenkins.swg-devops.com/build-scripts/criu_build/28/s390x_linux/criu.tar.gz.sha256.txt'; \
          ;; \
        aarch64) \
          CRIU_URL='https://na-public.artifactory.swg-devops.com/artifactory/sys-rt-generic-local/hyc-runtimes-jenkins.swg-devops.com/build-scripts/criu_build/28/aarch64_linux/criu.tar.gz'; \
          CRIU_SHA_URL='https://na-public.artifactory.swg-devops.com/artifactory/sys-rt-generic-local/hyc-runtimes-jenkins.swg-devops.com/build-scripts/criu_build/28/aarch64_linux/criu.tar.gz.sha256.txt'; \
          ;; \
        *) \
          echo "CRIU is not supported on: ${ARCH}"; \
          ;; \
        esac; \
        cd /tmp; \
        curl -H "${CRIU_AUTH_HEADER}" -LfsSo criu.tar.gz ${CRIU_URL}; \
        curl -H "${CRIU_AUTH_HEADER}" -LfsSo criu.tar.gz.sha256.txt ${CRIU_SHA_URL}; \
        sha256sum -c criu.tar.gz.sha256.txt; \
        tar -xzf criu.tar.gz --strip-components=1; \
        cp -R usr/local /usr; \
        echo /usr/local/lib64 > /etc/ld.so.conf.d/criu.conf; \
        ldconfig; \
        setcap cap_checkpoint_restore,cap_sys_ptrace,cap_setpcap=eip /usr/local/sbin/criu; \
        mkdir -p /opt/criu; \
        cp /usr/local/sbin/criu /opt/criu/criu; \
        setcap cap_checkpoint_restore,cap_setpcap=eip /opt/criu/criu; \
        rm -fr criu criu.tar.gz; \
        ;; \
      *) \
        echo "CRIU is not supported on: ${ARCH}"; \
        ;; \
    esac;

ENV PATH="/usr/local/sbin:$PATH"

ENV JAVA_VERSION jdk-17.0.8.1+1_openj9-0.40.0

RUN set -eux; \
    ARCH="$(uname -m)"; \
    case "${ARCH}" in \
       aarch64|arm64) \
         ESUM='93a79da9ed83813101af61b998359e51de17248a1f70cedcbe78b321b0d38f49'; \
         BINARY_URL='https://github.com/ibmruntimes/semeru17-binaries/releases/download/jdk-17.0.8.1%2B1_openj9-0.40.0/ibm-semeru-open-jdk_aarch64_linux_17.0.8.1_1_openj9-0.40.0.tar.gz'; \
         ;; \
       amd64|x86_64) \
         ESUM='27a20fd8e872b12e5d019233f41b634f89b07d02d53a3d9e8570bf49261a066a'; \
         BINARY_URL='https://github.com/ibmruntimes/semeru17-binaries/releases/download/jdk-17.0.8.1%2B1_openj9-0.40.0/ibm-semeru-open-jdk_x64_linux_17.0.8.1_1_openj9-0.40.0.tar.gz'; \
         ;; \
       ppc64el|ppc64le) \
         ESUM='f834f9cbf79864e0fef3543cc510ae775c9b4e0570cf2ac40b1ab13c7dd25fa0'; \
         BINARY_URL='https://github.com/ibmruntimes/semeru17-binaries/releases/download/jdk-17.0.8.1%2B1_openj9-0.40.0/ibm-semeru-open-jdk_ppc64le_linux_17.0.8.1_1_openj9-0.40.0.tar.gz'; \
         ;; \
       s390x) \
         ESUM='6ef591d1c72afe1fc4b30d7e9b6cdae5ecbc22a670810926fa32cd1280b3bf75'; \
         BINARY_URL='https://github.com/ibmruntimes/semeru17-binaries/releases/download/jdk-17.0.8.1%2B1_openj9-0.40.0/ibm-semeru-open-jdk_s390x_linux_17.0.8.1_1_openj9-0.40.0.tar.gz'; \
         ;;\
       *) \
         echo "Unsupported arch: ${ARCH}"; \
         exit 1; \
         ;; \
    esac; \
    curl -LfsSo /tmp/openjdk.tar.gz ${BINARY_URL}; \
    echo "${ESUM} */tmp/openjdk.tar.gz" | sha256sum -c -; \
    mkdir -p /opt/java/openjdk; \
    cd /opt/java/openjdk; \
    tar -xf /tmp/openjdk.tar.gz --strip-components=1; \
    mkdir -p /licenses; \
    cp /opt/java/openjdk/legal/java.base/LICENSE /licenses; \
    rm -rf /tmp/openjdk.tar.gz;

ENV JAVA_HOME=/opt/java/openjdk \
    PATH="/opt/java/openjdk/bin:$PATH"
ENV JAVA_TOOL_OPTIONS="-XX:+IgnoreUnrecognizedVMOptions -XX:+PortableSharedCache -XX:+IdleTuningGcOnIdle -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,readonly,nonFatal"

# Create OpenJ9 SharedClassCache (SCC) for bootclasses to improve the java startup.
# Downloads and runs tomcat to generate SCC for bootclasses at /opt/java/.scc/openj9_system_scc
# Does a dry-run and calculates the optimal cache size and recreates the cache with the appropriate size.
# With SCC, OpenJ9 startup is improved ~50% with an increase in image size of ~14MB
# Application classes can be create a separate cache layer with this as the base for further startup improvement

RUN set -eux; \
    unset OPENJ9_JAVA_OPTIONS; \
    SCC_SIZE="50m"; \
    DOWNLOAD_PATH_TOMCAT=/tmp/tomcat; \
    INSTALL_PATH_TOMCAT=/opt/tomcat-home; \
    TOMCAT_CHECKSUM="0db27185d9fc3174f2c670f814df3dda8a008b89d1a38a5d96cbbe119767ebfb1cf0bce956b27954aee9be19c4a7b91f2579d967932207976322033a86075f98"; \
    TOMCAT_DWNLD_URL="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.35/bin/apache-tomcat-9.0.35.tar.gz"; \
    \
    mkdir -p "${DOWNLOAD_PATH_TOMCAT}" "${INSTALL_PATH_TOMCAT}"; \
    curl -LfsSo "${DOWNLOAD_PATH_TOMCAT}"/tomcat.tar.gz "${TOMCAT_DWNLD_URL}"; \
    echo "${TOMCAT_CHECKSUM} *${DOWNLOAD_PATH_TOMCAT}/tomcat.tar.gz" | sha512sum -c -; \
    tar -xf "${DOWNLOAD_PATH_TOMCAT}"/tomcat.tar.gz -C "${INSTALL_PATH_TOMCAT}" --strip-components=1; \
    rm -rf "${DOWNLOAD_PATH_TOMCAT}"; \
    \
    java -Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal,createLayer -Xscmx$SCC_SIZE -version; \
    export OPENJ9_JAVA_OPTIONS="-Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal"; \
    "${INSTALL_PATH_TOMCAT}"/bin/startup.sh; \
    sleep 5; \
    "${INSTALL_PATH_TOMCAT}"/bin/shutdown.sh -force; \
    sleep 15; \
    FULL=$( (java -Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,printallStats 2>&1 || true) | awk '/^Cache is [0-9.]*% .*full/ {print substr($3, 1, length($3)-1)}'); \
    DST_CACHE=$(java -Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,destroy 2>&1 || true); \
    SCC_SIZE=$(echo $SCC_SIZE | sed 's/.$//'); \
    SCC_SIZE=$(awk "BEGIN {print int($SCC_SIZE * $FULL / 100.0)}"); \
    [ "${SCC_SIZE}" -eq 0 ] && SCC_SIZE=1; \
    SCC_SIZE="${SCC_SIZE}m"; \
    java -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal,createLayer -Xscmx$SCC_SIZE -version; \
    unset OPENJ9_JAVA_OPTIONS; \
    \
    export OPENJ9_JAVA_OPTIONS="-Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal"; \
    "${INSTALL_PATH_TOMCAT}"/bin/startup.sh; \
    sleep 5; \
    "${INSTALL_PATH_TOMCAT}"/bin/shutdown.sh -force; \
    sleep 5; \
    FULL=$( (java -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,printallStats 2>&1 || true) | awk '/^Cache is [0-9.]*% .*full/ {print substr($3, 1, length($3)-1)}'); \
    echo "SCC layer is $FULL% full."; \
    rm -rf "${INSTALL_PATH_TOMCAT}"; \
    if [ -d "/opt/java/.scc" ]; then \
          chmod -R 0777 /opt/java/.scc; \
    fi; \
    \
    echo "SCC generation phase completed";

CMD ["jshell"]
USER 1001
